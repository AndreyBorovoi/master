# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: ingress
#   annotations:
#     nginx.ingress.kubernetes.io/rewrite-target: /$1
# spec:
#   rules:
#     - host: aiservice.com
#       http:
#         paths:
#           - path: /redisinsight
#             pathType: Prefix
#             backend:
#               service:
#                 name: redisinsight-service 
#                 port:
#                   number: 80
#           - path: /
#             pathType: Prefix
#             backend:
#               service:
#                 name: main-api-service
#                 port:
#                   number: 80
---
apiVersion: v1
kind: Service
metadata:
  name: main-api-service
spec:
  type: LoadBalancer
  selector:
    project: main-api
  ports:
    - protocol  : TCP
      port      : 80
      targetPort: 3000
---
apiVersion : apps/v1
kind: Deployment
metadata:
  name: main-api-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      project: main-api
  template:
    metadata:
      labels:
        project: main-api
    spec:
      containers:
        - name : main-api-pod
          image: 87625155/main-api
          ports:
            - containerPort: 3000   # Port on Pod
          env:
            - name: MONGODB
              value: "mongodb+srv://testuser:testuser@cluster0.og9pt.mongodb.net/MainApi?retryWrites=true&w=majority"



---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
spec:
  ports:
  - port: 6379
    targetPort: 6379
    protocol  : TCP
  selector:
    app: redis
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-statefull-set
spec:
  serviceName: redis
  selector: 
    matchLabels:
      app: redis # has to match .spec.template.metadata.labels
  replicas: 1 # by default is 1
  template:
    metadata:
      labels:
        app: redis # has to match .spec.selector.matchLabels
    spec:
      containers:
      - name: redis
        image: redis:6.2.6-alpine
        ports:
        - containerPort: 6379
          name: redis
        volumeMounts:
        - name: data
          mountPath: /data
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: redisinsight-service       # name should not be 'redisinsight'
                                   # since the service creates
                                   # environment variables that
                                   # conflicts with redisinsight
                                   # application's environment
                                   # variables `REDISINSIGHT_HOST` and
                                   # `REDISINSIGHT_PORT`
spec:
  type: LoadBalancer
  ports:
    - port: 8001
      targetPort: 8001
  selector:
    app: redisinsight
---
# RedisInsight deployment with name 'redisinsight'
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redisinsight #deployment name
  labels:
    app: redisinsight #deployment label
spec:
  replicas: 1 #a single replica pod
  selector:
    matchLabels:
      app: redisinsight #which pods is the deployment managing, as defined by the pod template
  template: #pod template
    metadata:
      labels:
        app: redisinsight #label for pod/s
    spec:
      containers:
      - name:  redisinsight #Container name (DNS_LABEL, unique)
        image: redislabs/redisinsight:latest #repo/image
        imagePullPolicy: IfNotPresent #Always pull image
        volumeMounts:
        - name: db #Pod volumes to mount into the container's filesystem. Cannot be updated.
          mountPath: /db
        ports:
        - containerPort: 8001 #exposed container port and protocol
          protocol: TCP
      volumes:
      - name: db
        emptyDir: {} # node-ephemeral volume https://kubernetes.io/docs/concepts/storage/volumes/#emptydir

